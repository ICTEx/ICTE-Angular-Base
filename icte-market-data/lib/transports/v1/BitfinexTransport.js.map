{"version":3,"sources":["lib.js"],"names":["Object","exports","BitfinexProxy_1","require","BitfinexConstant_1","MsgFactory_1","MdConstant_1","MdUtils_1","BitfinexTransport","_0x3ec075","_0x1521c6","_0x34d0e5","_0x1618f0","_0x449044","_0x52639e","_0x50eb1c","_0x4ba34f","_0x4f54e7","_0x141410","_0x3e8836","_0x3ea7d4","Math","_0x5aa572","_0x34f209","_0x1d7b75","_0x1ab862","_0x5947ca"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BitfinexProxy_1 = require(\"./BitfinexProxy\");\r\nvar BitfinexConstant_1 = require(\"./BitfinexConstant\");\r\nvar MsgFactory_1 = require(\"./MsgFactory\");\r\nvar MdConstant_1 = require(\"../api/MdConstant\");\r\nvar MdUtils_1 = require(\"../api/MdUtils\");\r\nvar BitfinexTransport = /** @class */ (function () {\r\n    function BitfinexTransport(callback) {\r\n        this._connected = false;\r\n        this.cb = callback;\r\n    }\r\n    BitfinexTransport.prototype.isConnected = function () {\r\n        return this._connected;\r\n    };\r\n    BitfinexTransport.prototype.connect = function (symbols) {\r\n        this.init(); //Start connection\r\n    };\r\n    BitfinexTransport.prototype.init = function () {\r\n        var _this = this;\r\n        this.proxy = new BitfinexProxy_1.BitfinexProxy();\r\n        this.proxy.on(BitfinexConstant_1.BitfinexConstant.OPENEVENT, function (data) {\r\n            _this._connected = true;\r\n        });\r\n        this.proxy.on(BitfinexConstant_1.BitfinexConstant.CLOSEEVENT, function (data) {\r\n            _this._connected = false;\r\n        });\r\n        this.proxy.on(BitfinexConstant_1.BitfinexConstant.ERROREVENT, function (data) {\r\n            //TODO: Error system\r\n        });\r\n        this.proxy.on(BitfinexConstant_1.BitfinexConstant.TICKEREVENT, function (symbol, message) {\r\n            _this.processMessage(symbol, message);\r\n        });\r\n    };\r\n    BitfinexTransport.prototype.processMessage = function (symbol, message) {\r\n        if (symbol in BitfinexConstant_1.BitfinexConstant.PAIRS) {\r\n            var cqMsg = MsgFactory_1.MsgFactory.level1Msg;\r\n            var bestBid = Math.trunc(message[BitfinexConstant_1.BitfinexConstant.MSG_BID] * BitfinexConstant_1.BitfinexConstant.DIV) / BitfinexConstant_1.BitfinexConstant.DIV;\r\n            var bestAsk = Math.trunc(message[BitfinexConstant_1.BitfinexConstant.MSG_BID_SIZE] * BitfinexConstant_1.BitfinexConstant.DIV) / BitfinexConstant_1.BitfinexConstant.DIV;\r\n            var sizeBid = Math.trunc(message[BitfinexConstant_1.BitfinexConstant.MSG_ASK] * BitfinexConstant_1.BitfinexConstant.DIV) / BitfinexConstant_1.BitfinexConstant.DIV;\r\n            var sizeAsk = Math.trunc(message[BitfinexConstant_1.BitfinexConstant.MSG_ASK_SIZE] * BitfinexConstant_1.BitfinexConstant.DIV) / BitfinexConstant_1.BitfinexConstant.DIV;\r\n            var price = Math.trunc(message[BitfinexConstant_1.BitfinexConstant.MSG_LAST_PRICE] * BitfinexConstant_1.BitfinexConstant.DIV) / BitfinexConstant_1.BitfinexConstant.DIV;\r\n            cqMsg.buffer(MdUtils_1.MdUtils.getMsSinceMidnight(), BitfinexConstant_1.BitfinexConstant.PAIRS[symbol].symbol, Math.trunc(price), Math.trunc(price % 1 * BitfinexConstant_1.BitfinexConstant.DIV), Math.trunc(bestBid), Math.trunc(bestBid % 1 * BitfinexConstant_1.BitfinexConstant.DIV), Math.trunc(bestAsk), Math.trunc(bestAsk % 1 * BitfinexConstant_1.BitfinexConstant.DIV), MdConstant_1.MdConstant.BitfinexTransport, BitfinexConstant_1.BitfinexConstant.PAIRS[symbol].bench);\r\n            this.cb.on(cqMsg);\r\n        }\r\n    };\r\n    return BitfinexTransport;\r\n}());\r\nexports.BitfinexTransport = BitfinexTransport;\r\n"]}