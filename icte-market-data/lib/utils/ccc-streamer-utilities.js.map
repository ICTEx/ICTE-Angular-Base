{"version":3,"sources":["lib.js"],"names":["CCC","_0x523897","_0x5563c0","test","substr","_0x2196ab","parseInt","toFixed","_0xfcb168","exchangeNameMapping","hasOwnProperty","_0x14643d","_0x2f98d6","_0x5a7f53","_0x364af6","_0x494fe4","replace","length","_0x150e63","String","split","Number","_0x4a3c67","parseFloat","toPrecision","Math","round","_0x4939d4","_0x5e49b0","_0x5a4b92","STATIC","TYPE","CURRENTAGG","join","_0x500fb2","_0x481689","TRADE","_0x5ee80e","_0x3459d5","_0x36295e","_0x361163","_0x44de4b","_0x17e984","abs","_0x3e494b","_0x3ccafc","_0x4fee79","_0x1d4b73","_0x37e480","noExponents","_0x23cf15","_0x2a517d","_0x53e4ca","_0xffb0f8","_0x1d2acd","_0x483ec2","_0x42160f","_0x5f252c","_0x1a17b6","_0x5b5c75","_0x32f270","_0x5de1f5","_0x35be84","_0x46eddd","_0x3fb3d7","_0x490689","_0x3b1e97","_0x5a2fac","_0x3644a9","_0x1736fb","_0x11c8ee","_0x228fe5","_0x2bc3b3","_0x5752b9","_0x383b9d","_0x3e53e8","_0x44e800","_0x2351bb","_0x5b4fd5","_0x20294c","_0x5ecb6b","_0x3143a5","_0x4a7aa2","_0x55e5e7","_0x31c171","_0x392dff","_0x4f15d3","_0x5dbe6f","_0x47df96","_0x275f89","_0x3797dd","_0x121bbe","_0x5238a7","_0x2e1e6d","_0xb01463","_0x24a39c","_0x5dd384","_0x4eebc0","_0x4b7ef5","_0x76a063","_0x493273","_0x1c5df3","_0x4dcc9d","_0xb78d6d","_0x272353","_0x3b0c3e","_0x44da17","_0x3b51f0","_0x26958d","module"],"mappings":"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","sourcesContent":["var CCC = {};\r\n\r\nCCC.STATIC = CCC.STATIC || {};\r\n\r\nCCC.STATIC.TYPE = {\r\n    'TRADE': '0',\r\n    'FEEDNEWS': '1',\r\n    'CURRENT': '2',\r\n    'LOADCOMPLATE': '3',\r\n    'COINPAIRS': '4',\r\n    'CURRENTAGG': '5',\r\n    'TOPLIST': '6',\r\n    'TOPLISTCHANGE': '7',\r\n    'ORDERBOOK': '8',\r\n    'FULLORDERBOOK': '9',\r\n    'ACTIVATION': '10',\r\n    'FULLVOLUME': '11',\r\n    'TRADECATCHUP': '100',\r\n    'NEWSCATCHUP': '101',\r\n    'TRADECATCHUPCOMPLETE': '300',\r\n    'NEWSCATCHUPCOMPLETE': '301'\r\n};\r\n\r\nCCC.STATIC.CURRENCY = CCC.STATIC.CURRENCY || {};\r\n\r\nCCC.STATIC.CURRENCY.SYMBOL = {\r\n    'BTC': 'Éƒ',\r\n    'LTC': 'Å',\r\n    'DAO': 'Ã',\r\n    'USD': '$',\r\n    'CNY': 'Â¥',\r\n    'EUR': 'â‚¬',\r\n    'GBP': 'Â£',\r\n    'JPY': 'Â¥',\r\n    'PLN': 'zÅ‚',\r\n    'RUB': 'â‚½',\r\n    'ETH': 'Îž',\r\n    'GOLD': 'Gold g',\r\n    'INR': 'â‚¹',\r\n    'BRL': 'R$'\r\n};\r\n\r\nCCC.STATIC.CURRENCY.getId = function(symbol) {\r\n    return CCC.STATIC.CURRENCY.SYMBOL[symbol] || symbol;\r\n};\r\n\r\nCCC.STATIC.UTIL = {\r\n    exchangeNameMapping: {\r\n        'CCCAGG': 'CryptoCompare Index',\r\n        'BTCChina': 'BTCC'\r\n    },\r\n    isMobile: function(userAgent) {\r\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(userAgent) ||\r\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(userAgent.substr(0, 4)))\r\n            return true;\r\n        return false;\r\n    },\r\n    convertToMB: function(bytes) {\r\n        return (parseInt(bytes, 10) / 1024 / 1024).toFixed(2) + ' MB';\r\n    },\r\n    getNameForExchange: function(exchangeName) {\r\n        if (this.exchangeNameMapping.hasOwnProperty(exchangeName)) {\r\n            return this.exchangeNameMapping[exchangeName];\r\n        }\r\n        return exchangeName;\r\n    },\r\n    noExponents: function(value) {\r\n        var data = String(value).split(/[eE]/);\r\n        if (data.length == 1) return data[0];\r\n\r\n        var z = '',\r\n            sign = value < 0 ? '-' : '',\r\n            str = data[0].replace('.', ''),\r\n            mag = Number(data[1]) + 1;\r\n\r\n        if (mag < 0) {\r\n            z = sign + '0.';\r\n            while (mag++) z += '0';\r\n            return z + str.replace(/^\\-/, '');\r\n        }\r\n        mag -= str.length;\r\n        while (mag--) z += '0';\r\n        return str + z;\r\n    },\r\n    reduceFloatVal: function(value) {\r\n        value = parseFloat(value);\r\n        if (value > 1) {\r\n            value = Math.round(value * 100) / 100;\r\n            return value;\r\n        }\r\n        if (value >= 0.00001000) {\r\n            return parseFloat(value.toPrecision(4));\r\n        }\r\n        if (value >= 0.00000100) {\r\n            return parseFloat(value.toPrecision(3));\r\n        }\r\n        if (value >= 0.00000010) {\r\n            return parseFloat(value.toPrecision(2));\r\n        }\r\n        return parseFloat(value.toPrecision(1));\r\n    },\r\n    reduceReal: function(value) {\r\n        value = parseFloat(value);\r\n        return parseFloat(value.toFixed(8));\r\n    },\r\n    convertCurrentKeyToAll: function(key) {\r\n        var valuesArray = key.split(\"~\");\r\n        valuesArray[0] = CCC.STATIC.TYPE.CURRENTAGG;\r\n        valuesArray[1] = 'CCCAGG';\r\n        return valuesArray.join('~');\r\n    },\r\n    convertCurrentKeyToTrade: function(key) {\r\n        var valuesArray = key.split(\"~\");\r\n        valuesArray[0] = CCC.STATIC.TYPE.TRADE;\r\n        return valuesArray.join('~');\r\n    },\r\n    convertValueToDisplay: function(symbol, value, filterNumberFunctionAngularJS, type, fullNumbers) {\r\n        var prefix = '';\r\n        var valueSign = 1;\r\n        value = parseFloat(value);\r\n        var valueAbs = Math.abs(value);\r\n        var decimalsOnBigNumbers = 2;\r\n        var decimalsOnNormalNumbers = 2;\r\n        var decimalsOnSmallNumbers = 4;\r\n        if (fullNumbers === true) {\r\n            decimalsOnBigNumbers = 2;\r\n            decimalsOnNormalNumbers = 0;\r\n            decimalsOnSmallNumbers = 4;\r\n        }\r\n        if (type == \"8decimals\") {\r\n            decimalsOnBigNumbers = 4;\r\n            decimalsOnNormalNumbers = 8;\r\n            decimalsOnSmallNumbers = 8;\r\n            if (value < 0.0001 && value >= 0.00001) { decimalsOnSmallNumbers = 4; }\r\n            if (value < 0.001 && value >= 0.0001) { decimalsOnSmallNumbers = 5; }\r\n            if (value < 0.01 && value >= 0.001) { decimalsOnSmallNumbers = 6; }\r\n            if (value < 0.1 && value >= 0.01) { decimalsOnSmallNumbers = 7; }\r\n        }\r\n        if (symbol != '') { prefix = symbol + ' '; }\r\n        if (value < 0) { valueSign = -1; }\r\n        if (value == 0) { return prefix + '0'; }\r\n\r\n        if (value < 0.00001000 && value >= 0.00000100 && decimalsOnSmallNumbers > 3) {\r\n            decimalsOnSmallNumbers = 3;\r\n        }\r\n        if (value < 0.00000100 && value >= 0.00000010 && decimalsOnSmallNumbers > 2) {\r\n            decimalsOnSmallNumbers = 2;\r\n        }\r\n        if (value < 0.00000010 && decimalsOnSmallNumbers > 1) {\r\n            decimalsOnSmallNumbers = 1;\r\n        }\r\n\r\n        if (type == \"short\" || type == \"8decimals\") {\r\n            if (valueAbs > 10000000000) {\r\n                valueAbs = valueAbs / 1000000000;\r\n                return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' B';\r\n            }\r\n            if (valueAbs > 10000000) {\r\n                valueAbs = valueAbs / 1000000;\r\n                return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' M';\r\n            }\r\n            if (valueAbs > 10000) {\r\n                valueAbs = valueAbs / 1000;\r\n                return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers) + ' K';\r\n            }\r\n            if (type == \"8decimals\" && valueAbs >= 100) {\r\n                return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnBigNumbers);\r\n            }\r\n            if (valueAbs >= 1) {\r\n                return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnNormalNumbers);\r\n            }\r\n            return prefix + (valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers);\r\n        }\r\n        else {\r\n            if (valueAbs >= 1) {\r\n                return prefix + filterNumberFunctionAngularJS(valueSign * valueAbs, decimalsOnNormalNumbers);\r\n            }\r\n\r\n            return prefix + this.noExponents((valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nCCC.TRADE = CCC.TRADE || {};\r\n/*\r\ntrade fields binary values always in the last ~\r\n*/\r\n\r\nCCC.TRADE.FLAGS = {\r\n    'SELL': 0x1 // hex for binary 1\r\n    ,     'BUY': 0x2 // hex for binary 10\r\n    ,     'UNKNOWN': 0x4 // hex for binary 100\r\n}\r\n\r\nCCC.TRADE.FIELDS = {\r\n    'T': 0x0 // hex for binary 0, it is a special case of fields that are always there TYPE\r\n    ,   'M': 0x0 // hex for binary 0, it is a special case of fields that are always there MARKET\r\n    ,   'FSYM': 0x0 // hex for binary 0, it is a special case of fields that are always there FROM SYMBOL\r\n    ,   'TSYM': 0x0 // hex for binary 0, it is a special case of fields that are always there TO SYMBOL\r\n    ,   'F': 0x0 // hex for binary 0, it is a special case of fields that are always there FLAGS\r\n    ,   'ID': 0x1 // hex for binary 1                                                       ID\r\n    ,   'TS': 0x2 // hex for binary 10                                                      TIMESTAMP\r\n    ,   'Q': 0x4 // hex for binary 100                                                     QUANTITY\r\n    ,   'P': 0x8 // hex for binary 1000                                                    PRICE\r\n    ,   'TOTAL': 0x10 // hex for binary 10000                                                   TOTAL\r\n};\r\n\r\nCCC.TRADE.DISPLAY = CCC.TRADE.DISPLAY || {};\r\nCCC.TRADE.DISPLAY.FIELDS = {\r\n    'T': { \"Show\": false },\r\n    'M': { \"Show\": true, 'Filter': 'Market' },\r\n    'FSYM': { \"Show\": true, 'Filter': 'CurrencySymbol' },\r\n    'TSYM': { \"Show\": true, 'Filter': 'CurrencySymbol' },\r\n    'F': { \"Show\": true, 'Filter': 'TradeFlag' },\r\n    'ID': { \"Show\": true, 'Filter': 'Text' },\r\n    'TS': { 'Show': true, 'Filter': 'Date', 'Format': 'yyyy MMMM dd HH:mm:ss' },\r\n    'Q': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FSYM' },\r\n    'P': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TSYM' },\r\n    'TOTAL': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TSYM' }\r\n};\r\n\r\nCCC.TRADE.pack = function(tradeObject) {\r\n    var mask = 0;\r\n    var packedTrade = '';\r\n    for (var field in tradeObject) {\r\n        packedTrade += '~' + tradeObject[field];\r\n        mask |= this.FIELDS[field];\r\n    }\r\n    return packedTrade.substr(1) + '~' + mask.toString(16);\r\n};\r\n\r\nCCC.TRADE.unpack = function(tradeString) {\r\n    var valuesArray = tradeString.split(\"~\");\r\n    var valuesArrayLenght = valuesArray.length;\r\n    var mask = valuesArray[valuesArrayLenght - 1];\r\n    var maskInt = parseInt(mask, 16);\r\n    var unpackedTrade = {};\r\n    var currentField = 0;\r\n    for (var property in this.FIELDS) {\r\n        if (this.FIELDS[property] === 0) {\r\n            unpackedTrade[property] = valuesArray[currentField];\r\n            currentField++;\r\n        }\r\n        else if (maskInt & this.FIELDS[property]) {\r\n            unpackedTrade[property] = valuesArray[currentField];\r\n            currentField++;\r\n        }\r\n    }\r\n\r\n    return unpackedTrade;\r\n};\r\n\r\nCCC.TRADE.getKey = function(tradeObject) {\r\n    return tradeObject['T'] + '~' + tradeObject['M'] + '~' + tradeObject['FSYM'] + '~' + tradeObject['TSYM'];\r\n};\r\n\r\nCCC.CURRENT = CCC.CURRENT || {};\r\n/*\r\ncurrent fields mask values always in the last ~\r\n*/\r\n\r\nCCC.CURRENT.FLAGS = {\r\n    'PRICEUP': 0x1 // hex for binary 1\r\n    ,   'PRICEDOWN': 0x2 // hex for binary 10\r\n    ,   'PRICEUNCHANGED': 0x4 // hex for binary 100\r\n    ,   'BIDUP': 0x8 // hex for binary 1000\r\n    ,   'BIDDOWN': 0x10 // hex for binary 10000\r\n    ,   'BIDUNCHANGED': 0x20 // hex for binary 100000\r\n    ,   'OFFERUP': 0x40 // hex for binary 1000000\r\n    ,   'OFFERDOWN': 0x80 // hex for binary 10000000\r\n    ,   'OFFERUNCHANGED': 0x100 // hex for binary 100000000\r\n    ,   'AVGUP': 0x200 // hex for binary 1000000000\r\n    ,   'AVGDOWN': 0x400 // hex for binary 10000000000\r\n    ,   'AVGUNCHANGED': 0x800 // hex for binary 100000000000\r\n};\r\n\r\n\r\nCCC.CURRENT.FIELDS = {\r\n    'TYPE': 0x0 // hex for binary 0, it is a special case of fields that are always there\r\n    ,   'MARKET': 0x0 // hex for binary 0, it is a special case of fields that are always there\r\n    ,   'FROMSYMBOL': 0x0 // hex for binary 0, it is a special case of fields that are always there\r\n    ,   'TOSYMBOL': 0x0 // hex for binary 0, it is a special case of fields that are always there\r\n    ,   'FLAGS': 0x0 // hex for binary 0, it is a special case of fields that are always there\r\n    ,   'PRICE': 0x1 // hex for binary 1\r\n    ,   'BID': 0x2 // hex for binary 10\r\n    ,   'OFFER': 0x4 // hex for binary 100\r\n    ,   'LASTUPDATE': 0x8 // hex for binary 1000\r\n    ,   'AVG': 0x10 // hex for binary 10000\r\n    ,   'LASTVOLUME': 0x20 // hex for binary 100000\r\n    ,   'LASTVOLUMETO': 0x40 // hex for binary 1000000\r\n    ,   'LASTTRADEID': 0x80 // hex for binary 10000000\r\n    ,   'VOLUMEHOUR': 0x100 // hex for binary 100000000\r\n    ,   'VOLUMEHOURTO': 0x200 // hex for binary 1000000000\r\n    ,   'VOLUME24HOUR': 0x400 // hex for binary 10000000000\r\n    ,   'VOLUME24HOURTO': 0x800 // hex for binary 100000000000\r\n    ,   'OPENHOUR': 0x1000 // hex for binary 1000000000000\r\n    ,   'HIGHHOUR': 0x2000 // hex for binary 10000000000000\r\n    ,   'LOWHOUR': 0x4000 // hex for binary 100000000000000\r\n    ,   'OPEN24HOUR': 0x8000 // hex for binary 1000000000000000\r\n    ,   'HIGH24HOUR': 0x10000 // hex for binary 10000000000000000\r\n    ,   'LOW24HOUR': 0x20000 // hex for binary 100000000000000000\r\n    ,   'LASTMARKET': 0x40000 // hex for binary 1000000000000000000, this is a special case and will only appear on CCCAGG messages\r\n};\r\n\r\nCCC.CURRENT.DISPLAY = CCC.CURRENT.DISPLAY || {};\r\nCCC.CURRENT.DISPLAY.FIELDS = {\r\n    'TYPE': { 'Show': false },\r\n    'MARKET': { 'Show': true, 'Filter': 'Market' },\r\n    'FROMSYMBOL': { 'Show': false },\r\n    'TOSYMBOL': { 'Show': false },\r\n    'FLAGS': { 'Show': false },\r\n    'PRICE': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'BID': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'OFFER': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'LASTUPDATE': { 'Show': true, 'Filter': 'Date', 'Format': 'yyyy MMMM dd HH:mm:ss' },\r\n    'AVG': { 'Show': true, ' Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'LASTVOLUME': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },\r\n    'LASTVOLUMETO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'LASTTRADEID': { 'Show': true, 'Filter': 'String' },\r\n    'VOLUMEHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },\r\n    'VOLUMEHOURTO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'VOLUME24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },\r\n    'VOLUME24HOURTO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'OPENHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'HIGHHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'LOWHOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'OPEN24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'HIGH24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'LOW24HOUR': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' },\r\n    'LASTMARKET': { 'Show': true, 'Filter': 'String' },\r\n    'CHANGE24HOUR': { 'Show': true, 'Filter': 'String' },\r\n    'CHANGE24HOURPCT': { 'Show': true, 'Filter': 'String' },\r\n    'FULLVOLUMEFROM': { 'Show': true, 'Filter': 'Number', 'Symbol': 'FROMSYMBOL' },\r\n    'FULLVOLUMETO': { 'Show': true, 'Filter': 'Number', 'Symbol': 'TOSYMBOL' }\r\n};\r\n\r\nCCC.CURRENT.pack = function(currentObject) {\r\n    var mask = 0;\r\n    var packedCurrent = '';\r\n    for (var property in this.FIELDS) {\r\n        if (currentObject.hasOwnProperty(property)) {\r\n            packedCurrent += '~' + currentObject[property];\r\n            mask |= this.FIELDS[property];\r\n        }\r\n    }\r\n    //removing first character beacsue it is a ~\r\n    return packedCurrent.substr(1) + '~' + mask.toString(16);\r\n};\r\n\r\nCCC.CURRENT.unpack = function(value) {\r\n    var valuesArray = value.split(\"~\");\r\n    var valuesArrayLenght = valuesArray.length;\r\n    var mask = valuesArray[valuesArrayLenght - 1];\r\n    var maskInt = parseInt(mask, 16);\r\n    var unpackedCurrent = {};\r\n    var currentField = 0;\r\n    for (var property in this.FIELDS) {\r\n        if (this.FIELDS[property] === 0) {\r\n            unpackedCurrent[property] = valuesArray[currentField];\r\n            currentField++;\r\n        }\r\n        else if (maskInt & this.FIELDS[property]) {\r\n            //i know this is a hack, for cccagg, future code please don't hate me:(, i did this to avoid\r\n            //subscribing to trades as well in order to show the last market\r\n            if (property === 'LASTMARKET') {\r\n                unpackedCurrent[property] = valuesArray[currentField];\r\n            }\r\n            else {\r\n                unpackedCurrent[property] = parseFloat(valuesArray[currentField]);\r\n            }\r\n            currentField++;\r\n        }\r\n    }\r\n\r\n    return unpackedCurrent;\r\n};\r\nCCC.CURRENT.getKey = function(currentObject) {\r\n    return currentObject['TYPE'] + '~' + currentObject['MARKET'] + '~' + currentObject['FROMSYMBOL'] + '~' + currentObject['TOSYMBOL'];\r\n};\r\nCCC.CURRENT.getKeyFromStreamerData = function(streamerData) {\r\n    var valuesArray = streamerData.split(\"~\");\r\n    return valuesArray[0] + '~' + valuesArray[1] + '~' + valuesArray[2] + '~' + valuesArray[3];\r\n};\r\n\r\nCCC.FULLVOLUME = CCC.FULLVOLUME || {};\r\n\r\nCCC.FULLVOLUME.FIELDS = {\r\n    'TYPE': 0x0,\r\n    'SYMBOL': 0x0,\r\n    'FULLVOLUME': 0x0\r\n};\r\n\r\nCCC.FULLVOLUME.unpack = function(volStr) {\r\n    var valuesArray = volStr.split(\"~\");\r\n    var unpackedCurrent = {};\r\n    var currentField = 0;\r\n    var fields = this.FIELDS;\r\n    for (var property in fields) {\r\n        if (fields[property] == 0) {\r\n            unpackedCurrent[property] = valuesArray[currentField];\r\n            currentField++;\r\n        }\r\n    }\r\n    return unpackedCurrent;\r\n};\r\n\r\nCCC.FULLVOLUME.pack = function(volObj) {\r\n    var packedVol = '';\r\n    var fields = this.FIELDS;\r\n\r\n    for(var property in fields) {\r\n        if (volObj.hasOwnProperty(property) && fields[property] == 0) {\r\n            packedVol += '~' + volObj[property];\r\n        }\r\n    }\r\n    return packedVol.substr(1);\r\n};\r\n\r\nCCC.noExponents = function(value) {\r\n    var data = String(value).split(/[eE]/);\r\n    if (data.length == 1) return data[0];\r\n\r\n    var z = '',\r\n        sign = value < 0 ? '-' : '',\r\n        str = data[0].replace('.', ''),\r\n        mag = Number(data[1]) + 1;\r\n\r\n    if (mag < 0) {\r\n        z = sign + '0.';\r\n        while (mag++) z += '0';\r\n        return z + str.replace(/^\\-/, '');\r\n    }\r\n    mag -= str.length;\r\n    while (mag--) z += '0';\r\n    return str + z;\r\n};\r\n\r\nCCC.filterNumberFunctionPolyfill = function(value, decimals) {\r\n    var decimalsDenominator = Math.pow(10, decimals);\r\n    var numberWithCorrectDecimals = Math.round(value * decimalsDenominator) / decimalsDenominator;\r\n    var parts = numberWithCorrectDecimals.toString().split(\".\");\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return parts.join(\".\");\r\n}\r\n\r\nCCC.convertValueToDisplay = function(symbol, value, type, fullNumbers) {\r\n    var prefix = '';\r\n    var valueSign = 1;\r\n    value = parseFloat(value);\r\n    var valueAbs = Math.abs(value);\r\n    var decimalsOnBigNumbers = 2;\r\n    var decimalsOnNormalNumbers = 2;\r\n    var decimalsOnSmallNumbers = 4;\r\n    if (fullNumbers === true) {\r\n        decimalsOnBigNumbers = 2;\r\n        decimalsOnNormalNumbers = 0;\r\n        decimalsOnSmallNumbers = 4;\r\n    }\r\n    if (symbol != '') {\r\n        prefix = symbol + ' ';\r\n    }\r\n    if (value < 0) {\r\n        valueSign = -1;\r\n    }\r\n\r\n    if (value == 0) {\r\n        return prefix + '0';\r\n    }\r\n\r\n    if (value < 0.00001000 && value >= 0.00000100 && decimalsOnSmallNumbers > 3) {\r\n        decimalsOnSmallNumbers = 3;\r\n    }\r\n    if (value < 0.00000100 && value >= 0.00000010 && decimalsOnSmallNumbers > 2) {\r\n        decimalsOnSmallNumbers = 2;\r\n    }\r\n    if (value < 0.00000010 && value >= 0.00000001 && decimalsOnSmallNumbers > 1) {\r\n        decimalsOnSmallNumbers = 1;\r\n    }\r\n\r\n    if (type == \"short\") {\r\n        if (valueAbs > 10000000000) {\r\n            valueAbs = valueAbs / 1000000000;\r\n            return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' B';\r\n        }\r\n        if (valueAbs > 10000000) {\r\n            valueAbs = valueAbs / 1000000;\r\n            return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' M';\r\n        }\r\n        if (valueAbs > 10000) {\r\n            valueAbs = valueAbs / 1000;\r\n            return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnBigNumbers) + ' K';\r\n        }\r\n        if (valueAbs >= 1) {\r\n            return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnNormalNumbers);\r\n        }\r\n        return prefix + (valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers);\r\n    }\r\n    else {\r\n        if (valueAbs >= 1) {\r\n            return prefix + CCC.filterNumberFunctionPolyfill(valueSign * valueAbs, decimalsOnNormalNumbers);\r\n        }\r\n\r\n        return prefix + CCC.noExponents((valueSign * valueAbs).toPrecision(decimalsOnSmallNumbers));\r\n    }\r\n};\r\n\r\nmodule.exports = CCC;"]}